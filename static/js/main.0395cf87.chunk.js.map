{"version":3,"sources":["redux/actionTypes.js","redux/reducers/pokemons.js","redux/reducers/index.js","redux/store.js","api/Pokemon.js","redux/actions.js","formatter.js","static/ImageNotAvailable.png","pages/Pokemon/index.js","components/Card/index.js","components/Pagination/index.js","pages/Pokemons/index.js","pages/PageNotFound/index.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["POKEMONS_LOADING","POKEMONS_SHOW","POKEMONS_SHOW_ITEM","initialState","focusOn","items","itemsPerPage","page","status","shallowClone","object","Object","assign","pokemons","state","action","type","newState","payload","combineReducers","createStore","rootReducer","applyMiddleware","thunk","API_END_POINTS","get","API_BASE_URL","API_FETCH_INITS","mode","headers","body","pokemonApi","params","init","uri","limit","offset","fetch","response","json","then","list","results","requestDetails","forEach","item","push","url","itemDetails","Promise","all","result","data","dataCount","count","pokemon","abilities","ability","names","filter","_getLang","name","sort","pokemonId","this","_getBy","pokemonName","moves","move","catch","error","console","language","stats","stat","index","base","base_stat","effort","a","b","pokemonIdOrName","getAbilities","getMoves","getStats","id","image","sprites","front_default","fetchPokemons","dispatch","loading","formatId","String","padStart","formatName","charAt","toUpperCase","slice","Pokemon","props","className","notAvailable","imageAlt","map","idx","alt","height","src","width","React","Component","connect","Card","handleClick","bind","handleShowDetails","history","onClick","title","getById","fetchPokemon","withRouter","Pagination","total","pages","Math","ceil","isClickable","isSelected","label","offsetStart","offsetEnd","i","prepareItems","createMarkup","__html","join","dangerouslySetInnerHTML","handleGoTo","Pokemons","PageNotFound","store","App","logo","activeClassName","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0395cf87.chunk.js","sourcesContent":["export const MY_POKEMONS_ADD = \"MY_POKEMONS_ADD\";\nexport const MY_POKEMONS_REMOVE = \"MY_POKEMONS_REMOVE\";\nexport const MY_POKEMONS_SHOW = \"MY_POKEMONS_SHOW\";\nexport const MY_POKEMONS_SHOW_ITEM = \"MY_POKEMONS_SHOW_ITEM\";\n\nexport const POKEMONS_LOADING = \"POKEMONS_LOADING\";\nexport const POKEMONS_SHOW = \"POKEMONS_SHOW\";\nexport const POKEMONS_SHOW_ITEM = \"POKEMONS_SHOW_ITEM\";\n","import {\n    POKEMONS_LOADING,\n    POKEMONS_SHOW,\n    POKEMONS_SHOW_ITEM\n} from \"../actionTypes\";\n\nconst initialState = {\n    focusOn: null, // contains detailed info about a pokemon\n    items: null,\n    itemsPerPage: 16,\n    page: 1,\n    status: \"loading\" // or loaded\n};\n\nconst shallowClone = (object) => {\n    //\n    // Avoid deep clone if it is not necessary\n    // https://www.freecodecamp.org/news/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5/\n    //\n    return Object.assign({}, object);\n};\n\nconst pokemons = (state = initialState, action) => {\n    switch (action.type) {\n        case POKEMONS_LOADING: {\n            const newState = shallowClone(state);\n\n            newState.focusOn = null; // cleanup\n            newState.status = action.payload.status;\n\n            return newState;\n        }\n        case POKEMONS_SHOW: {\n            const newState = shallowClone(state);\n\n            newState.focusOn = null; // cleanup\n            newState.items = action.payload.items;\n            newState.itemsPerPage = action.payload.itemsPerPage;\n            newState.page = action.payload.page;\n            newState.status = action.payload.status;\n\n            return newState;\n        }\n        case POKEMONS_SHOW_ITEM: {\n            const newState = shallowClone(state);\n\n            newState.focusOn = action.payload.focusOn;\n            newState.status = action.payload.status;\n\n            return newState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default pokemons;\n","import { combineReducers } from \"redux\";\nimport pokemons from \"./pokemons\";\n\nexport default combineReducers({ pokemons });\n","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nimport thunk from 'redux-thunk';\n\nexport default createStore(rootReducer, applyMiddleware(thunk));\n","/**\n * Pokemon API <https://pokeapi.co/>\n *\n * Author: Elia Contini <https://elia.contini.page/>\n *\n * Dev notes about fetch()\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n */\nconst API_BASE_URL = \"https://pokeapi.co/api/v2/\";\nconst API_END_POINTS = {\n    get: API_BASE_URL + \"pokemon/\"\n};\nconst API_FETCH_INITS = {\n    GET: {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: null\n    },\n    POST: null\n    // ... other HTTP verbs\n};\nconst LANGUAGE = \"en\";\n\nclass Pokemon {\n    /**\n     * Get information about all Pokemons\n     *\n     * @param {object} params\n     * @param {number} params.itemsPerPage\n     * @param {number} params.page\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async get(params) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n        let uri = API_END_POINTS.get;\n\n        if (params != null) {\n            const limit = params.itemsPerPage;\n            const offset = (params.page - 1) * params.itemsPerPage;\n\n            uri = uri + `?limit=${limit}&offset=${offset}`;\n        }\n\n        const response = await fetch(uri, init);\n\n        return response.json().then((response) => {\n            const list = response.results;\n\n            let requestDetails = [];\n\n            list.forEach((item) => {\n                requestDetails.push(\n                    fetch(item.url, init).then((itemDetails) => {\n                        return itemDetails.json();\n                    })\n                );\n            });\n\n            return Promise.all(requestDetails).then((items) => {\n                let result = {\n                    data: [],\n                    dataCount: response.count\n                };\n\n                items.forEach((item) => {\n                    result.data.push(item);\n                });\n\n                return result;\n            });\n        });\n    }\n\n    /**\n     * Get pokemon abilities\n     *\n     * @param {object} pokemon\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getAbilities(pokemon) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n\n        let requestDetails = [];\n        pokemon.abilities.forEach((item) => {\n            requestDetails.push(\n                fetch(item.ability.url, init).then((ability) => {\n                    return ability.json();\n                })\n            );\n        });\n\n        return Promise.all(requestDetails).then((items) => {\n            let result = [];\n\n            items.forEach((item) => {\n                result.push(item.names.filter(this._getLang)[0].name);\n            });\n\n            return result.sort();\n        });\n    }\n\n    /**\n     * Get details about a Pokemon retrieving data by ID\n     *\n     * @param {number} pokemonId\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getById(pokemonId) {\n        return this._getBy(pokemonId);\n    }\n\n    /**\n     * Get details about a Pokemon retrieving data by name\n     *\n     * @param {string} pokemonName\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getByName(pokemonName) {\n        return this._getBy(pokemonName);\n    }\n\n    /**\n     * Get pokemon moves\n     *\n     * @param {object} pokemon\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getMoves(pokemon) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n\n        let requestDetails = [];\n        pokemon.moves.forEach((item) => {\n            requestDetails.push(\n                fetch(item.move.url, init)\n                    .then((move) => {\n                        return move.json();\n                    })\n                    .catch((error) => {\n                        console.error(\n                            \"There has been a problem with your fetch operation:\",\n                            error\n                        );\n\n                        const unavailable = {\n                            names: [\n                                {\n                                    language: {\n                                        name: LANGUAGE\n                                    },\n                                    name:\n                                        item.move.name +\n                                        \" (unavailable details)\"\n                                }\n                            ]\n                        };\n\n                        return unavailable;\n                    })\n            );\n        });\n\n        return Promise.all(requestDetails).then((items) => {\n            let result = [];\n\n            items.forEach((item) => {\n                result.push(item.names.filter(this._getLang)[0].name);\n            });\n\n            return result.sort();\n        });\n    }\n\n    /**\n     * Get pokemon stats\n     *\n     * @param {object} pokemon\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getStats(pokemon) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n\n        let requestDetails = [];\n        pokemon.stats.forEach((item) => {\n            requestDetails.push(\n                fetch(item.stat.url, init).then((stat) => {\n                    return stat.json();\n                })\n            );\n        });\n\n        return Promise.all(requestDetails).then((items) => {\n            let result = [];\n\n            items.forEach((item, index) => {\n                result.push({\n                    base: pokemon.stats[index].base_stat,\n                    effort: pokemon.stats[index].effort,\n                    name: item.names.filter(this._getLang)[0].name\n                });\n            });\n\n            return result.sort((a, b) => {\n                if (a.name > b.name) {\n                    return 1;\n                }\n\n                if (a.name < b.name) {\n                    return -1;\n                }\n\n                return 0;\n            });\n        });\n    }\n\n    //\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\n    //\n    // Should be async #getBy(pokemonIdOrName) { ... }\n    // Still not supported on Firefox (under experimental features)\n    //\n    async _getBy(pokemonIdOrName) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n        const uri = API_END_POINTS.get + `${pokemonIdOrName}/`;\n\n        const response = await fetch(uri, init);\n\n        return response.json().then((pokemon) => {\n            let requestDetails = [\n                this.getAbilities(pokemon),\n                this.getMoves(pokemon),\n                this.getStats(pokemon)\n            ];\n\n            return Promise.all(requestDetails).then((data) => {\n                let result = {\n                    abilities: data[0],\n                    id: pokemon.id,\n                    image: pokemon.sprites.front_default,\n                    moves: data[1],\n                    name: pokemon.name,\n                    stats: data[2]\n                };\n\n                return result;\n            });\n        });\n    }\n\n    // Should be #getLang(pokemonIdOrName) { ... }\n    _getLang(item) {\n        if (item.language.name === LANGUAGE) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Pokemon;\n","import {\n    POKEMONS_LOADING,\n    POKEMONS_SHOW,\n    POKEMONS_SHOW_ITEM\n} from \"./actionTypes\";\n\nimport PokemonApi from \"./../api/Pokemon\";\n\nconst pokemonApi = new PokemonApi();\n\nexport const fetchPokemon = (pokemon) => {\n    return (dispatch) => {\n        const request = pokemonApi.getById(pokemon.id).then((data) => {\n            dispatch({\n                type: POKEMONS_SHOW_ITEM,\n                payload: {\n                    focusOn: data,\n                    status: \"loaded\"\n                }\n            });\n        });\n\n        return request;\n    };\n};\n\nexport const fetchPokemons = (params) => {\n    return (dispatch) => {\n        const request = pokemonApi.get(params).then((data) => {\n            dispatch({\n                type: POKEMONS_SHOW,\n                payload: {\n                    items: data,\n                    itemsPerPage: params.itemsPerPage,\n                    page: params.page,\n                    status: \"loaded\"\n                }\n            });\n        });\n\n        return request;\n    };\n};\n\nexport const loading = () => {\n    return (dispatch) => {\n        dispatch({\n            type: POKEMONS_LOADING,\n            payload: {\n                status: \"loading\"\n            }\n        });\n    };\n};\n","export const formatId = (item) => {\n    const id = String(item.id);\n\n    return id.padStart(5, \"0\");\n};\n\nexport const formatName = (item) => {\n    const name = item.name;\n\n    // It is possible also to use CSS property {text-transform: capitalize;}\n    return name.charAt(0).toUpperCase() + name.slice(1);;\n};\n","export default __webpack_public_path__ + \"static/media/ImageNotAvailable.57c45eb0.png\";","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { formatId, formatName } from \"./../../formatter\";\n\nimport \"./Pokemon.css\";\nimport notAvailable from \"./../../static/ImageNotAvailable.png\";\n\nclass Pokemon extends React.Component {\n    render() {\n        const data = this.props.data;\n\n        if (data.status === \"loading\") {\n            return (\n                <div className=\"Pokemon\">\n                    <h2>Pokemon data are loading ...</h2>\n                </div>\n            );\n        }\n\n        const pokemon = data.focusOn;\n        const name = formatName(pokemon);\n        let image = notAvailable;\n        let imageAlt = \"Image not available for \" + name;\n        if (pokemon.image != null) {\n            image = pokemon.image;\n            imageAlt = \"An image of \" + name;\n        }\n\n        return (\n            <div className=\"Pokemon\">\n                <h2 className=\"Pokemon-name\">{name}</h2>\n                <p className=\"Pokemon-id\">ID: {formatId(pokemon)}</p>\n                <div className=\"Pokemon-details\">\n                    <div className=\"Pokemon-info\">\n                        <h3>Abilities</h3>\n                        <ul className=\"Pokemon-abilities\">\n                            {pokemon.abilities.map((item, idx) => {\n                                return (\n                                    <li\n                                        className=\"Pokemon-ability\"\n                                        key={\"ability-\" + idx}\n                                    >\n                                        {item}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n\n                        <h3>Moves</h3>\n                        <ul className=\"Pokemon-moves\">\n                            {pokemon.moves.map((item, idx) => {\n                                return (\n                                    <li\n                                        className=\"Pokemon-move\"\n                                        key={\"move-\" + idx}\n                                    >\n                                        {item}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n\n                        <h3>Stats</h3>\n                        <table className=\"Pokemon-stats\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Value</th>\n                                    <th>Effort</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {pokemon.stats.map((item, idx) => {\n                                    return (\n                                        <tr key={\"stat-\" + idx}>\n                                            <td>{item.name}</td>\n                                            <td>{item.base}</td>\n                                            <td>{item.effort}</td>\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                    <div>\n                        <img\n                            alt={imageAlt}\n                            className=\"Pokemon-image\"\n                            height=\"96\"\n                            src={image}\n                            width=\"96\"\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { data: state.pokemons };\n};\n\nexport default connect(mapStateToProps)(Pokemon);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { fetchPokemon, loading } from \"./../../redux/actions\";\n\n// https://stackoverflow.com/questions/44877821/how-to-navigate-on-path-by-button-click-in-react-router-v4\nimport { withRouter } from \"react-router\";\n\nimport { formatId, formatName } from \"./../../formatter\";\n\nimport \"./Card.css\";\nimport notAvailable from \"./../../static/ImageNotAvailable.png\";\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        const pokemon = this.props.item;\n        const pokemonName = pokemon.name;\n\n        this.props.handleShowDetails(pokemon);\n\n        this.props.history.push(`/pokemons/${pokemonName}/`);\n    }\n\n    render() {\n        const item = this.props.item;\n        const name = formatName(item);\n\n        let image = notAvailable;\n        let imageAlt = \"Image not available for \" + name;\n        if (item.sprites.front_default != null) {\n            image = item.sprites.front_default;\n            imageAlt = \"An image of \" + name;\n        }\n\n        return (\n            <div\n                className=\"Card\"\n                onClick={this.handleClick}\n                title={\"Show details about \" + name}\n            >\n                <h3 className=\"Card-name\">{name}</h3>\n\n                <img\n                    alt={imageAlt}\n                    className=\"Card-image\"\n                    height=\"96\"\n                    src={image}\n                    width=\"96\"\n                />\n\n                <p className=\"Card-id\">#{formatId(item)}</p>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleShowDetails: (pokemon) => {\n            dispatch(loading());\n            dispatch(fetchPokemon(pokemon));\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(Card));\n\n//export default withRouter(Card);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { fetchPokemons, loading } from \"./../../redux/actions\";\n\nimport \"./Pagination.css\";\n\nclass Pagination extends React.Component {\n    prepareItems() {\n        const data = this.props.data;\n\n        if (data.items == null) {\n            return [];\n        }\n\n        const itemsPerPage = data.itemsPerPage;\n        const page = data.page;\n        const total = data.items.dataCount;\n\n        const pages = Math.ceil(total / itemsPerPage);\n\n        let items = [];\n\n        // head\n        if (page === 1) {\n            items.push({\n                isClickable: false,\n                isSelected: false,\n                label: \"&lsaquo;\",\n                page: 1\n            });\n            items.push({\n                isClickable: false,\n                isSelected: true,\n                label: \"1\",\n                page: 1\n            });\n        } else {\n            items.push({\n                isClickable: true,\n                isSelected: false,\n                label: \"&lsaquo;\",\n                page: page - 1\n            });\n\n            items.push({\n                isClickable: true,\n                isSelected: false,\n                label: \"1\",\n                page: 1\n            });\n\n            if (page - 2 > 1) {\n                items.push({\n                    isClickable: false,\n                    isSelected: false,\n                    label: \"...\",\n                    page: null\n                });\n            }\n        }\n        // middle\n        var offsetStart = page - 2;\n        if (offsetStart <= 1) {\n            offsetStart = 2;\n        }\n        var offsetEnd = page + 2;\n        if (offsetEnd >= pages) {\n            offsetEnd = pages - 1;\n        }\n        for (var i = offsetStart; i <= offsetEnd; i++) {\n            if (i === page) {\n                items.push({\n                    isClickable: false,\n                    isSelected: true,\n                    label: i,\n                    page: i\n                });\n            } else {\n                items.push({\n                    isClickable: true,\n                    isSelected: false,\n                    label: i,\n                    page: i\n                });\n            }\n        }\n        // tail\n        if (page === pages) {\n            items.push({\n                isClickable: false,\n                isSelected: true,\n                label: pages,\n                page: pages\n            });\n            items.push({\n                isClickable: false,\n                isSelected: false,\n                label: \"&rsaquo;\",\n                page: pages\n            });\n        } else {\n            if (page + 2 < pages) {\n                items.push({\n                    isClickable: false,\n                    isSelected: false,\n                    label: \"...\",\n                    page: null\n                });\n                items.push({\n                    isClickable: true,\n                    isSelected: false,\n                    label: pages,\n                    page: pages\n                });\n            } else {\n                items.push({\n                    isClickable: true,\n                    isSelected: false,\n                    label: pages,\n                    page: pages\n                });\n            }\n\n            items.push({\n                isClickable: true,\n                isSelected: false,\n                label: \"&rsaquo;\",\n                page: page + 1\n            });\n        }\n\n        return items;\n    }\n\n    render() {\n        const items = this.prepareItems();\n\n        return (\n            <div className=\"Pagination\">\n                {items.map((item, idx) => {\n                    function createMarkup(label) {\n                        return { __html: label };\n                    }\n\n                    let className = [\"Pagination-item\"];\n                    if (item.isClickable === true) {\n                        className.push(\"Pagination-item-isClickable\");\n                    }\n                    if (item.isSelected === true) {\n                        className.push(\"Pagination-item-isSelected\");\n                    }\n\n                    if (item.isClickable === true) {\n                        return (\n                            <span\n                                className={className.join(\" \")}\n                                dangerouslySetInnerHTML={createMarkup(\n                                    item.label\n                                )}\n                                onClick={() => this.props.handleGoTo(item.page)}\n                                key={idx}\n                            ></span>\n                        );\n                    }\n\n                    return (\n                        <span\n                            className={className.join(\" \")}\n                            dangerouslySetInnerHTML={createMarkup(item.label)}\n                            key={idx}\n                        ></span>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleGoTo: (page) => {\n            dispatch(loading());\n            dispatch(fetchPokemons({ itemsPerPage: 16, page: page }));\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Pagination);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport Card from \"./../../components/Card\";\nimport Pagination from \"./../../components/Pagination\";\n\nimport \"./Pokemons.css\";\n\nclass Pokemons extends React.Component {\n    render() {\n        const data = this.props.data;\n        const items = data.items == null ? [] : data.items.data;\n\n        let className = [\"Pokemons\"];\n        if (data.status === \"loading\") {\n            className.push(\"Pokemons-isLoading\");\n        }\n\n        return (\n            <div className={className.join(\" \")}>\n                <h2 className=\"Pokemons-loading-wrapper\">\n                    <span className=\"Pokemons-loading-message\">\n                        Pokemons data are loading ...\n                    </span>\n                </h2>\n                <ul className=\"Pokemons-list\">\n                    {items.map((item, idx) => {\n                        return (\n                            <li className=\"Pokemons-item\" key={idx}>\n                                <Card item={item} />\n                            </li>\n                        );\n                    })}\n                </ul>\n                <Pagination data={data} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { data: state.pokemons };\n};\n\nexport default connect(mapStateToProps)(Pokemons);\n","import React from \"react\";\n\nclass PageNotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Error 404: Page not found</h2>\n            </div>\n        );\n    }\n}\n\nexport default PageNotFound;\n","export default __webpack_public_path__ + \"static/media/logo.f7ca03eb.svg\";","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { fetchPokemons, loading } from \"./redux/actions\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink\n} from \"react-router-dom\";\n\nimport Pokemon from \"./pages/Pokemon\";\nimport Pokemons from \"./pages/Pokemons\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// init App data\nstore.dispatch(loading());\nstore.dispatch(fetchPokemons({ itemsPerPage: 16, page: 1 }));\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <h1 className=\"App-name\">Pok&eacute;dex</h1>\n                    </header>\n                    <hr />\n                    <nav className=\"App-navigation\">\n                        <ul className=\"App-navigation-items\">\n                            <li className=\"App-navigation-item\">\n                                <NavLink\n                                    activeClassName=\"App-navigation-link-is-selected\"\n                                    className=\"App-navigation-link\"\n                                    to=\"/\"\n                                >\n                                    Pokemons\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                    <hr />\n                    <main className=\"App-main\">\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Pokemons />\n                            </Route>\n                            <Route path=\"/pokemons/:name/\">\n                                <Pokemon />\n                            </Route>\n                            <Route path=\"*\">\n                                <PageNotFound />\n                            </Route>\n                        </Switch>\n                    </main>\n                    <hr />\n                    <footer className=\"App-footer\">\n                        &copy; 2020 Elia Contini.\n                    </footer>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}