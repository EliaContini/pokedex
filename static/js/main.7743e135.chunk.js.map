{"version":3,"sources":["redux/actionTypes.js","redux/reducers/myPokemons.js","redux/reducers/pokemons.js","redux/reducers/index.js","redux/store.js","api/Pokemon.js","redux/actionsPokemons.js","formatter.js","static/ImageNotAvailable.png","pages/MyPokemons/index.js","redux/actionsMyPokemons.js","pages/Pokemon/index.js","components/Card/index.js","components/Pagination/index.js","pages/Pokemons/index.js","pages/PageNotFound/index.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["MY_POKEMONS_ADD","MY_POKEMONS_REMOVE","POKEMONS_LOADING","POKEMONS_SHOW","POKEMONS_SHOW_ITEM","initialState","myPokemons","myPokemonsIndex","shallowClone","object","Object","assign","state","action","type","pokemon","payload","pokemonId","id","newState","length","index","splice","item","i","focusOn","items","itemsPerPage","page","status","pokemons","combineReducers","savedState","localStorage","getItem","JSON","parse","e","getState","myPokemonsInitialState","pokemonsInitialState","store","createStore","rootReducer","applyMiddleware","thunk","subscribe","setItem","stringify","API_END_POINTS","get","API_BASE_URL","API_FETCH_INITS","mode","headers","body","pokemonApi","params","init","uri","limit","offset","fetch","response","json","then","list","results","requestDetails","forEach","push","url","itemDetails","Promise","all","result","data","dataCount","count","abilities","ability","names","filter","_getLang","name","sort","this","_getBy","pokemonName","moves","move","catch","error","console","language","stats","stat","base","base_stat","effort","a","b","pokemonIdOrName","getAbilities","getMoves","getStats","image","sprites","front_default","fetchPokemon","dispatch","getById","fetchPokemons","loading","formatId","String","padStart","formatName","charAt","toUpperCase","slice","MyPokemons","props","handleRemove","bind","handleShowDetails","handleMyPokemonsRemove","history","prepared","notAvailable","imageAlt","raw","prepareData","className","map","idx","alt","height","src","width","onClick","React","Component","connect","remove","withRouter","Pokemon","Card","handleAdd","handleClick","event","stopPropagation","handleMyPokemonsAdd","title","add","Pagination","total","pages","Math","ceil","isClickable","isSelected","label","offsetStart","offsetEnd","prepareItems","createMarkup","__html","join","dangerouslySetInnerHTML","handleGoTo","Pokemons","PageNotFound","App","logo","activeClassName","isActive","match","location","pathname","test","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7743e135.chunk.js","sourcesContent":["export const MY_POKEMONS_ADD = \"MY_POKEMONS_ADD\";\nexport const MY_POKEMONS_REMOVE = \"MY_POKEMONS_REMOVE\";\n\nexport const POKEMONS_LOADING = \"POKEMONS_LOADING\";\nexport const POKEMONS_SHOW = \"POKEMONS_SHOW\";\nexport const POKEMONS_SHOW_ITEM = \"POKEMONS_SHOW_ITEM\";\n","import {\n    MY_POKEMONS_ADD,\n    MY_POKEMONS_REMOVE\n} from \"../actionTypes\";\n\nexport const initialState = {\n    myPokemons: [],\n    myPokemonsIndex: {}\n};\n\nconst shallowClone = (object) => {\n    //\n    // Avoid deep clone if it is not necessary\n    // https://www.freecodecamp.org/news/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5/\n    //\n    return Object.assign({}, object);\n};\n\nconst myPokemons = (state = initialState, action) => {\n    switch (action.type) {\n        case MY_POKEMONS_ADD: {\n            const pokemon = action.payload.pokemon;\n            const pokemonId = pokemon.id;\n\n            // avoid duplicates entries\n            if (state.myPokemonsIndex[pokemonId] == null) {\n                const newState = {\n                    myPokemons: [...state.myPokemons, pokemon],\n                    myPokemonsIndex: shallowClone(state.myPokemonsIndex)\n                };\n                newState.myPokemonsIndex[pokemonId] =\n                    newState.myPokemons.length - 1;\n\n                return newState;\n            }\n\n            return state;\n        }\n        case MY_POKEMONS_REMOVE: {\n            const pokemon = action.payload.pokemon;\n            const pokemonId = pokemon.id;\n            const index = state.myPokemonsIndex[pokemonId];\n\n            let myPokemons = [...state.myPokemons];\n            myPokemons.splice(index, 1);\n\n            const newState = {\n                myPokemons: myPokemons,\n                myPokemonsIndex: shallowClone(state.myPokemonsIndex)\n            };\n            // set to null instead of delete key\n            newState.myPokemonsIndex[pokemonId] = null;\n\n            // rebuild index: after a remove indeces are changed\n            let item = null;\n            for (\n                let i = 0, length = newState.myPokemons.length;\n                i < length;\n                i++\n            ) {\n                item = newState.myPokemons[i];\n                newState.myPokemonsIndex[item.id] = i;\n            }\n\n            return newState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default myPokemons;\n","import {\n    POKEMONS_LOADING,\n    POKEMONS_SHOW,\n    POKEMONS_SHOW_ITEM\n} from \"../actionTypes\";\n\nexport const initialState = {\n    focusOn: null, // contains detailed info about a pokemon\n    items: null,\n    itemsPerPage: 16,\n    page: 1,\n    status: \"loading\" // or loaded\n};\n\nconst shallowClone = (object) => {\n    //\n    // Avoid deep clone if it is not necessary\n    // https://www.freecodecamp.org/news/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5/\n    //\n    return Object.assign({}, object);\n};\n\nconst pokemons = (state = initialState, action) => {\n    switch (action.type) {\n        case POKEMONS_LOADING: {\n            const newState = shallowClone(state);\n\n            newState.focusOn = null; // cleanup\n            newState.status = action.payload.status;\n\n            return newState;\n        }\n        case POKEMONS_SHOW: {\n            const newState = shallowClone(state);\n\n            newState.focusOn = null; // cleanup\n            newState.items = action.payload.items;\n            newState.itemsPerPage = action.payload.itemsPerPage;\n            newState.page = action.payload.page;\n            newState.status = action.payload.status;\n\n            return newState;\n        }\n        case POKEMONS_SHOW_ITEM: {\n            const newState = shallowClone(state);\n\n            newState.focusOn = action.payload.focusOn;\n            newState.status = action.payload.status;\n\n            return newState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default pokemons;\n","import { combineReducers } from \"redux\";\nimport myPokemons from \"./myPokemons\";\nimport pokemons from \"./pokemons\";\n\nexport default combineReducers({ myPokemons, pokemons });\n","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nimport { initialState as myPokemonsInitialState } from \"./reducers/myPokemons\";\nimport { initialState as pokemonsInitialState } from \"./reducers/pokemons\";\n\nimport thunk from \"redux-thunk\";\n\n//\n// save / retrieve My Pokemons from browser local storage\n//\n// adapted from https://github.com/techiediaries/react-jsjargon/blob/master/src/index.js\n//\nconst saveState = (state) => {\n    if (state.myPokemons.myPokemons.length > 0) {\n        localStorage.setItem(\"state\", JSON.stringify(state.myPokemons));\n    }\n};\n\nconst getState = () => {\n    try {\n        const state = localStorage.getItem(\"state\");\n\n        if (state == null) {\n            return undefined;\n        }\n\n        return JSON.parse(state);\n    } catch (e) {\n        return undefined;\n    }\n};\n\nconst savedState = getState();\n\nconst initialState = {\n    myPokemons: savedState == null ? myPokemonsInitialState : savedState,\n    pokemons: pokemonsInitialState\n};\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk));\n\nstore.subscribe(() => {\n    saveState({\n        myPokemons: store.getState().myPokemons\n    });\n});\n\nexport default store;\n","/**\n * Pokemon API <https://pokeapi.co/>\n *\n * Author: Elia Contini <https://elia.contini.page/>\n *\n * Dev notes about fetch()\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n */\nconst API_BASE_URL = \"https://pokeapi.co/api/v2/\";\nconst API_END_POINTS = {\n    get: API_BASE_URL + \"pokemon/\"\n};\nconst API_FETCH_INITS = {\n    GET: {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: null\n    },\n    POST: null\n    // ... other HTTP verbs\n};\nconst LANGUAGE = \"en\";\n\nclass Pokemon {\n    /**\n     * Get information about all Pokemons\n     *\n     * @param {object} params\n     * @param {number} params.itemsPerPage\n     * @param {number} params.page\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async get(params) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n        let uri = API_END_POINTS.get;\n\n        if (params != null) {\n            const limit = params.itemsPerPage;\n            const offset = (params.page - 1) * params.itemsPerPage;\n\n            uri = uri + `?limit=${limit}&offset=${offset}`;\n        }\n\n        const response = await fetch(uri, init);\n\n        return response.json().then((response) => {\n            const list = response.results;\n\n            let requestDetails = [];\n\n            list.forEach((item) => {\n                requestDetails.push(\n                    fetch(item.url, init).then((itemDetails) => {\n                        return itemDetails.json();\n                    })\n                );\n            });\n\n            return Promise.all(requestDetails).then((items) => {\n                let result = {\n                    data: [],\n                    dataCount: response.count\n                };\n\n                items.forEach((item) => {\n                    result.data.push(item);\n                });\n\n                return result;\n            });\n        });\n    }\n\n    /**\n     * Get pokemon abilities\n     *\n     * @param {object} pokemon\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getAbilities(pokemon) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n\n        let requestDetails = [];\n        pokemon.abilities.forEach((item) => {\n            requestDetails.push(\n                fetch(item.ability.url, init).then((ability) => {\n                    return ability.json();\n                })\n            );\n        });\n\n        return Promise.all(requestDetails).then((items) => {\n            let result = [];\n\n            items.forEach((item) => {\n                result.push(item.names.filter(this._getLang)[0].name);\n            });\n\n            return result.sort();\n        });\n    }\n\n    /**\n     * Get details about a Pokemon retrieving data by ID\n     *\n     * @param {number} pokemonId\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getById(pokemonId) {\n        return this._getBy(pokemonId);\n    }\n\n    /**\n     * Get details about a Pokemon retrieving data by name\n     *\n     * @param {string} pokemonName\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getByName(pokemonName) {\n        return this._getBy(pokemonName);\n    }\n\n    /**\n     * Get pokemon moves\n     *\n     * @param {object} pokemon\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getMoves(pokemon) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n\n        let requestDetails = [];\n        pokemon.moves.forEach((item) => {\n            requestDetails.push(\n                fetch(item.move.url, init)\n                    .then((move) => {\n                        return move.json();\n                    })\n                    .catch((error) => {\n                        console.error(\n                            \"There has been a problem with your fetch operation:\",\n                            error\n                        );\n\n                        const unavailable = {\n                            names: [\n                                {\n                                    language: {\n                                        name: LANGUAGE\n                                    },\n                                    name:\n                                        item.move.name +\n                                        \" (unavailable details)\"\n                                }\n                            ]\n                        };\n\n                        return unavailable;\n                    })\n            );\n        });\n\n        return Promise.all(requestDetails).then((items) => {\n            let result = [];\n\n            items.forEach((item) => {\n                result.push(item.names.filter(this._getLang)[0].name);\n            });\n\n            return result.sort();\n        });\n    }\n\n    /**\n     * Get pokemon stats\n     *\n     * @param {object} pokemon\n     *\n     * @returns {Promise} - a promise fulfilled with requested data\n     */\n    async getStats(pokemon) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n\n        let requestDetails = [];\n        pokemon.stats.forEach((item) => {\n            requestDetails.push(\n                fetch(item.stat.url, init).then((stat) => {\n                    return stat.json();\n                })\n            );\n        });\n\n        return Promise.all(requestDetails).then((items) => {\n            let result = [];\n\n            items.forEach((item, index) => {\n                result.push({\n                    base: pokemon.stats[index].base_stat,\n                    effort: pokemon.stats[index].effort,\n                    name: item.names.filter(this._getLang)[0].name\n                });\n            });\n\n            return result.sort((a, b) => {\n                if (a.name > b.name) {\n                    return 1;\n                }\n\n                if (a.name < b.name) {\n                    return -1;\n                }\n\n                return 0;\n            });\n        });\n    }\n\n    //\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\n    //\n    // Should be async #getBy(pokemonIdOrName) { ... }\n    // Still not supported on Firefox (under experimental features)\n    //\n    async _getBy(pokemonIdOrName) {\n        let init = Object.assign({}, API_FETCH_INITS.GET);\n        const uri = API_END_POINTS.get + `${pokemonIdOrName}/`;\n\n        const response = await fetch(uri, init);\n\n        return response.json().then((pokemon) => {\n            let requestDetails = [\n                this.getAbilities(pokemon),\n                this.getMoves(pokemon),\n                this.getStats(pokemon)\n            ];\n\n            return Promise.all(requestDetails).then((data) => {\n                let result = {\n                    abilities: data[0],\n                    id: pokemon.id,\n                    image: pokemon.sprites.front_default,\n                    moves: data[1],\n                    name: pokemon.name,\n                    stats: data[2]\n                };\n\n                return result;\n            });\n        });\n    }\n\n    // Should be #getLang(pokemonIdOrName) { ... }\n    _getLang(item) {\n        if (item.language.name === LANGUAGE) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Pokemon;\n","import {\n    POKEMONS_LOADING,\n    POKEMONS_SHOW,\n    POKEMONS_SHOW_ITEM\n} from \"./actionTypes\";\n\nimport PokemonApi from \"./../api/Pokemon\";\n\nconst pokemonApi = new PokemonApi();\n\nexport const fetchPokemon = (pokemon) => {\n    return (dispatch) => {\n        const request = pokemonApi.getById(pokemon.id).then((data) => {\n            dispatch({\n                type: POKEMONS_SHOW_ITEM,\n                payload: {\n                    focusOn: data,\n                    status: \"loaded\"\n                }\n            });\n        });\n\n        return request;\n    };\n};\n\nexport const fetchPokemons = (params) => {\n    return (dispatch) => {\n        const request = pokemonApi.get(params).then((data) => {\n            dispatch({\n                type: POKEMONS_SHOW,\n                payload: {\n                    items: data,\n                    itemsPerPage: params.itemsPerPage,\n                    page: params.page,\n                    status: \"loaded\"\n                }\n            });\n        });\n\n        return request;\n    };\n};\n\nexport const loading = () => {\n    return (dispatch) => {\n        dispatch({\n            type: POKEMONS_LOADING,\n            payload: {\n                status: \"loading\"\n            }\n        });\n    };\n};\n","export const formatId = (item) => {\n    const id = String(item.id);\n\n    return id.padStart(5, \"0\");\n};\n\nexport const formatName = (item) => {\n    const name = item.name;\n\n    // It is possible also to use CSS property {text-transform: capitalize;}\n    return name.charAt(0).toUpperCase() + name.slice(1);;\n};\n","export default __webpack_public_path__ + \"static/media/ImageNotAvailable.57c45eb0.png\";","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { remove } from \"./../../redux/actionsMyPokemons\";\nimport { fetchPokemon, loading } from \"./../../redux/actionsPokemons\";\n\n// https://stackoverflow.com/questions/44877821/how-to-navigate-on-path-by-button-click-in-react-router-v4\nimport { withRouter } from \"react-router\";\n\nimport { formatId, formatName } from \"./../../formatter\";\n\nimport \"./MyPokemons.css\";\nimport notAvailable from \"./../../static/ImageNotAvailable.png\";\n\nclass MyPokemons extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleRemove = this.handleRemove.bind(this);\n        this.handleShowDetails = this.handleShowDetails.bind(this);\n    }\n\n    handleRemove(pokemon) {\n        this.props.handleMyPokemonsRemove(pokemon);\n    }\n\n    handleShowDetails(pokemon) {\n        const pokemonName = pokemon.name;\n        this.props.handleShowDetails(pokemon);\n        this.props.history.push(`/my-pokemons/${pokemonName}/`);\n    }\n\n    prepareData() {\n        const pokemons = this.props.data.myPokemons;\n        let prepared = [];\n\n        pokemons.forEach((item) => {\n            const name = formatName(item);\n\n            let image = notAvailable;\n            let imageAlt = \"Image not available for \" + name;\n            if (item.sprites.front_default != null) {\n                image = item.sprites.front_default;\n                imageAlt = \"An image of \" + name;\n            }\n\n            prepared.push({\n                id: \"#\" + formatId(item),\n                image: image,\n                imageAlt: imageAlt,\n                name: name,\n                raw: item\n            });\n        });\n\n        return prepared;\n    }\n\n    render() {\n        const pokemons = this.prepareData();\n\n        if (pokemons.length === 0) {\n            return (\n                <div className=\"MyPokemons\">\n                    <h2>No Pokemons in your list.</h2>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"MyPokemons\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>Name</th>\n                            <th>ID</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {pokemons.map((item, idx) => {\n                            return (\n                                <tr key={\"my-pokemon\" + idx}>\n                                    <td>\n                                        <img\n                                            alt={item.imageAlt}\n                                            height=\"48\"\n                                            src={item.image}\n                                            width=\"48\"\n                                        />\n                                    </td>\n                                    <td>{item.name}</td>\n                                    <td>{item.id}</td>\n                                    <td>\n                                        <button\n                                            className=\"MyPokemons-button MyPokemons-remove\"\n                                            onClick={() => {\n                                                this.handleRemove(item.raw);\n                                            }}\n                                        >\n                                            Remove\n                                        </button>\n                                        <button\n                                            className=\"MyPokemons-button MyPokemons-show\"\n                                            onClick={() => {\n                                                this.handleShowDetails(\n                                                    item.raw\n                                                );\n                                            }}\n                                        >\n                                            Show\n                                        </button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleMyPokemonsRemove: (pokemon) => {\n            dispatch(remove(pokemon));\n        },\n        handleShowDetails: (pokemon) => {\n            dispatch(loading());\n            dispatch(fetchPokemon(pokemon));\n        }\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return { data: state.myPokemons };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(MyPokemons));\n","import {\n    MY_POKEMONS_ADD,\n    MY_POKEMONS_REMOVE\n} from \"./actionTypes\";\n\nexport const add = (pokemon) => {\n    return (dispatch) => {\n        dispatch({\n            type: MY_POKEMONS_ADD,\n            payload: {\n                pokemon\n            }\n        });\n    };\n};\n\nexport const remove = (pokemon) => {\n    return (dispatch) => {\n        dispatch({\n            type: MY_POKEMONS_REMOVE,\n            payload: {\n                pokemon\n            }\n        });\n    };\n};\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { formatId, formatName } from \"./../../formatter\";\n\nimport \"./Pokemon.css\";\nimport notAvailable from \"./../../static/ImageNotAvailable.png\";\n\nclass Pokemon extends React.Component {\n    render() {\n        const data = this.props.data;\n\n        if (data.status === \"loading\") {\n            return (\n                <div className=\"Pokemon\">\n                    <h2>Pokemon data are loading ...</h2>\n                </div>\n            );\n        }\n\n        const pokemon = data.focusOn;\n        const name = formatName(pokemon);\n        let image = notAvailable;\n        let imageAlt = \"Image not available for \" + name;\n        if (pokemon.image != null) {\n            image = pokemon.image;\n            imageAlt = \"An image of \" + name;\n        }\n\n        return (\n            <div className=\"Pokemon\">\n                <h2 className=\"Pokemon-name\">{name}</h2>\n                <p className=\"Pokemon-id\">ID: {formatId(pokemon)}</p>\n                <div className=\"Pokemon-details\">\n                    <div className=\"Pokemon-info\">\n                        <h3>Abilities</h3>\n                        <ul className=\"Pokemon-abilities\">\n                            {pokemon.abilities.map((item, idx) => {\n                                return (\n                                    <li\n                                        className=\"Pokemon-ability\"\n                                        key={\"ability-\" + idx}\n                                    >\n                                        {item}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n\n                        <h3>Moves</h3>\n                        <ul className=\"Pokemon-moves\">\n                            {pokemon.moves.map((item, idx) => {\n                                return (\n                                    <li\n                                        className=\"Pokemon-move\"\n                                        key={\"move-\" + idx}\n                                    >\n                                        {item}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n\n                        <h3>Stats</h3>\n                        <table className=\"Pokemon-stats\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Value</th>\n                                    <th>Effort</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {pokemon.stats.map((item, idx) => {\n                                    return (\n                                        <tr key={\"stat-\" + idx}>\n                                            <td>{item.name}</td>\n                                            <td>{item.base}</td>\n                                            <td>{item.effort}</td>\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                    <div>\n                        <img\n                            alt={imageAlt}\n                            className=\"Pokemon-image\"\n                            height=\"96\"\n                            src={image}\n                            width=\"96\"\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { data: state.pokemons };\n};\n\nexport default connect(mapStateToProps)(Pokemon);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { add } from \"./../../redux/actionsMyPokemons\";\nimport { fetchPokemon, loading } from \"./../../redux/actionsPokemons\";\n\n// https://stackoverflow.com/questions/44877821/how-to-navigate-on-path-by-button-click-in-react-router-v4\nimport { withRouter } from \"react-router\";\n\nimport { formatId, formatName } from \"./../../formatter\";\n\nimport \"./Card.css\";\nimport notAvailable from \"./../../static/ImageNotAvailable.png\";\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleAdd(event) {\n        event.stopPropagation();\n\n        const pokemon = this.props.item;\n        this.props.handleMyPokemonsAdd(pokemon);\n    }\n\n    handleClick() {\n        const pokemon = this.props.item;\n        const pokemonName = pokemon.name;\n\n        this.props.handleShowDetails(pokemon);\n\n        this.props.history.push(`/pokemons/${pokemonName}/`);\n    }\n\n    render() {\n        const item = this.props.item;\n        const name = formatName(item);\n\n        let image = notAvailable;\n        let imageAlt = \"Image not available for \" + name;\n        if (item.sprites.front_default != null) {\n            image = item.sprites.front_default;\n            imageAlt = \"An image of \" + name;\n        }\n\n        return (\n            <div\n                className=\"Card\"\n                onClick={this.handleClick}\n                title={\"Show details about \" + name}\n            >\n                <h2 className=\"Card-name\">{name}</h2>\n\n                <img\n                    alt={imageAlt}\n                    className=\"Card-image\"\n                    height=\"96\"\n                    src={image}\n                    width=\"96\"\n                />\n\n                <div className=\"Card-footer\">\n                    <p className=\"Card-id\">#{formatId(item)} </p>\n                    <button\n                        className=\"Card-add\"\n                        onClick={this.handleAdd}\n                        title={\"Add \" + name + \" to My Pokemons\"}\n                    >\n                        Add\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleMyPokemonsAdd: (pokemon) => {\n            dispatch(add(pokemon));\n        },\n        handleShowDetails: (pokemon) => {\n            dispatch(loading());\n            dispatch(fetchPokemon(pokemon));\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(Card));\n\n//export default withRouter(Card);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { fetchPokemons, loading } from \"./../../redux/actionsPokemons\";\n\nimport \"./Pagination.css\";\n\nclass Pagination extends React.Component {\n    prepareItems() {\n        const data = this.props.data;\n\n        if (data.items == null) {\n            return [];\n        }\n\n        const itemsPerPage = data.itemsPerPage;\n        const page = data.page;\n        const total = data.items.dataCount;\n\n        const pages = Math.ceil(total / itemsPerPage);\n\n        let items = [];\n\n        // head\n        if (page === 1) {\n            items.push({\n                isClickable: false,\n                isSelected: false,\n                label: \"&lsaquo;\",\n                page: 1\n            });\n            items.push({\n                isClickable: false,\n                isSelected: true,\n                label: \"1\",\n                page: 1\n            });\n        } else {\n            items.push({\n                isClickable: true,\n                isSelected: false,\n                label: \"&lsaquo;\",\n                page: page - 1\n            });\n\n            items.push({\n                isClickable: true,\n                isSelected: false,\n                label: \"1\",\n                page: 1\n            });\n\n            if (page - 2 > 1) {\n                items.push({\n                    isClickable: false,\n                    isSelected: false,\n                    label: \"...\",\n                    page: null\n                });\n            }\n        }\n        // middle\n        var offsetStart = page - 2;\n        if (offsetStart <= 1) {\n            offsetStart = 2;\n        }\n        var offsetEnd = page + 2;\n        if (offsetEnd >= pages) {\n            offsetEnd = pages - 1;\n        }\n        for (var i = offsetStart; i <= offsetEnd; i++) {\n            if (i === page) {\n                items.push({\n                    isClickable: false,\n                    isSelected: true,\n                    label: i,\n                    page: i\n                });\n            } else {\n                items.push({\n                    isClickable: true,\n                    isSelected: false,\n                    label: i,\n                    page: i\n                });\n            }\n        }\n        // tail\n        if (page === pages) {\n            items.push({\n                isClickable: false,\n                isSelected: true,\n                label: pages,\n                page: pages\n            });\n            items.push({\n                isClickable: false,\n                isSelected: false,\n                label: \"&rsaquo;\",\n                page: pages\n            });\n        } else {\n            if (page + 2 < pages) {\n                items.push({\n                    isClickable: false,\n                    isSelected: false,\n                    label: \"...\",\n                    page: null\n                });\n                items.push({\n                    isClickable: true,\n                    isSelected: false,\n                    label: pages,\n                    page: pages\n                });\n            } else {\n                items.push({\n                    isClickable: true,\n                    isSelected: false,\n                    label: pages,\n                    page: pages\n                });\n            }\n\n            items.push({\n                isClickable: true,\n                isSelected: false,\n                label: \"&rsaquo;\",\n                page: page + 1\n            });\n        }\n\n        return items;\n    }\n\n    render() {\n        const items = this.prepareItems();\n\n        return (\n            <div className=\"Pagination\">\n                {items.map((item, idx) => {\n                    function createMarkup(label) {\n                        return { __html: label };\n                    }\n\n                    let className = [\"Pagination-item\"];\n                    if (item.isClickable === true) {\n                        className.push(\"Pagination-item-isClickable\");\n                    }\n                    if (item.isSelected === true) {\n                        className.push(\"Pagination-item-isSelected\");\n                    }\n\n                    if (item.isClickable === true) {\n                        return (\n                            <span\n                                className={className.join(\" \")}\n                                dangerouslySetInnerHTML={createMarkup(\n                                    item.label\n                                )}\n                                onClick={() => this.props.handleGoTo(item.page)}\n                                key={idx}\n                            ></span>\n                        );\n                    }\n\n                    return (\n                        <span\n                            className={className.join(\" \")}\n                            dangerouslySetInnerHTML={createMarkup(item.label)}\n                            key={idx}\n                        ></span>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleGoTo: (page) => {\n            dispatch(loading());\n            dispatch(fetchPokemons({ itemsPerPage: 16, page: page }));\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Pagination);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport Card from \"./../../components/Card\";\nimport Pagination from \"./../../components/Pagination\";\n\nimport \"./Pokemons.css\";\n\nclass Pokemons extends React.Component {\n    render() {\n        const data = this.props.data;\n        const items = data.items == null ? [] : data.items.data;\n\n        let className = [\"Pokemons\"];\n        if (data.status === \"loading\") {\n            className.push(\"Pokemons-isLoading\");\n        }\n\n        return (\n            <div className={className.join(\" \")}>\n                <h2 className=\"Pokemons-loading-wrapper\">\n                    <span className=\"Pokemons-loading-message\">\n                        Pokemons data are loading ...\n                    </span>\n                </h2>\n                <ul className=\"Pokemons-list\">\n                    {items.map((item, idx) => {\n                        return (\n                            <li className=\"Pokemons-item\" key={idx}>\n                                <Card item={item} />\n                            </li>\n                        );\n                    })}\n                </ul>\n                <Pagination data={data} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { data: state.pokemons };\n};\n\nexport default connect(mapStateToProps)(Pokemons);\n","import React from \"react\";\n\nclass PageNotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Error 404: Page not found</h2>\n            </div>\n        );\n    }\n}\n\nexport default PageNotFound;\n","export default __webpack_public_path__ + \"static/media/logo.f7ca03eb.svg\";","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { fetchPokemons, loading } from \"./redux/actionsPokemons\";\n\nimport {\n    //\n    // it does not work on GitHub pages. To use it, it needs to be able to\n    // configure web server\n    //\n    // For NGINX\n    // server {\n    //     # ...\n    //\n    //     location / {\n    //         try_files $uri $uri/ =404;\n    //     }\n    //\n    //     # ...\n    // }\n    //\n    //\n    // BrowserRouter as Router,\n    HashRouter as Router,\n    NavLink,\n    Route,\n    Switch\n} from \"react-router-dom\";\n\nimport MyPokemons from \"./pages/MyPokemons\";\nimport Pokemon from \"./pages/Pokemon\";\nimport Pokemons from \"./pages/Pokemons\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// init App data\nstore.dispatch(loading());\nstore.dispatch(fetchPokemons({ itemsPerPage: 16, page: 1 }));\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img\n                            alt=\"Logo\"\n                            className=\"App-logo\"\n                            height=\"48\"\n                            src={logo}\n                            width=\"48\"\n                        />\n                        <h1 className=\"App-name\">Pok&eacute;dex</h1>\n                    </header>\n                    <hr />\n                    <nav className=\"App-navigation\">\n                        <ul className=\"App-navigation-items\">\n                            <li className=\"App-navigation-item\">\n                                <NavLink\n                                    activeClassName=\"App-navigation-link-is-selected\"\n                                    className=\"App-navigation-link\"\n                                    isActive={(match, location) => {\n                                        const pathname = location.pathname;\n                                        if (\n                                            pathname === \"/\" ||\n                                            /^\\/pokemons\\//gi.test(pathname)\n                                        ) {\n                                            return true;\n                                        }\n\n                                        return false;\n                                    }}\n                                    to=\"/\"\n                                >\n                                    Pokemons\n                                </NavLink>\n                            </li>\n                            <li className=\"App-navigation-item\">\n                                <NavLink\n                                    activeClassName=\"App-navigation-link-is-selected\"\n                                    className=\"App-navigation-link\"\n                                    to=\"/my-pokemons/\"\n                                >\n                                    My Pokemons\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                    <hr />\n                    <main className=\"App-main\">\n                        <Switch>\n                            <Route exact path={[\"/\", \"/pokemons/\"]}>\n                                <Pokemons />\n                            </Route>\n                            <Route exact path=\"/pokemons/:name/\">\n                                <Pokemon />\n                            </Route>\n                            <Route exact path=\"/my-pokemons/\">\n                                <MyPokemons />\n                            </Route>\n                            <Route exact path=\"/my-pokemons/:name/\">\n                                <Pokemon />\n                            </Route>\n                            <Route path=\"*\">\n                                <PageNotFound />\n                            </Route>\n                        </Switch>\n                    </main>\n                    <hr />\n                    <footer className=\"App-footer\">\n                        &copy; 2020 Elia Contini.\n                    </footer>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}